# Generated by Django 4.1.3 on 2022-12-05 18:58

from django.conf import settings
import django.contrib.auth.models
import django.core.validators
from django.db import migrations, models
import django.db.models.deletion
import django.utils.timezone


class Migration(migrations.Migration):

    initial = True

    dependencies = [
        ('auth', '0012_alter_user_first_name_max_length'),
    ]

    operations = [
        migrations.CreateModel(
            name='User',
            fields=[
                ('id', models.BigAutoField(auto_created=True, primary_key=True, serialize=False, verbose_name='ID')),
                ('last_login', models.DateTimeField(blank=True, null=True, verbose_name='last login')),
                ('is_superuser', models.BooleanField(default=False, help_text='Designates that this user has all permissions without explicitly assigning them.', verbose_name='superuser status')),
                ('is_staff', models.BooleanField(default=False, help_text='Designates whether the user can log into this admin site.', verbose_name='staff status')),
                ('is_active', models.BooleanField(default=True, help_text='Designates whether this user should be treated as active. Unselect this instead of deleting accounts.', verbose_name='active')),
                ('date_joined', models.DateTimeField(default=django.utils.timezone.now, verbose_name='date joined')),
                ('username', models.CharField(max_length=30, unique=True, validators=[django.core.validators.RegexValidator(message='Username must consist of @ followed by at least three alphanumericals', regex='^@\\w{3,}$')])),
                ('email', models.EmailField(max_length=254, unique=True)),
                ('first_name', models.CharField(max_length=50)),
                ('last_name', models.CharField(max_length=50)),
                ('account_type', models.PositiveSmallIntegerField(choices=[(1, 'Student'), (2, 'Teacher'), (3, 'Administrator')], default=1)),
                ('balance', models.IntegerField(default=0)),
                ('password', models.CharField(max_length=100)),
                ('groups', models.ManyToManyField(blank=True, help_text='The groups this user belongs to. A user will get all permissions granted to each of their groups.', related_name='user_set', related_query_name='user', to='auth.group', verbose_name='groups')),
                ('user_permissions', models.ManyToManyField(blank=True, help_text='Specific permissions for this user.', related_name='user_set', related_query_name='user', to='auth.permission', verbose_name='user permissions')),
            ],
            options={
                'verbose_name': 'user',
                'verbose_name_plural': 'users',
                'abstract': False,
            },
            managers=[
                ('objects', django.contrib.auth.models.UserManager()),
            ],
        ),
        migrations.CreateModel(
            name='LessonRequest',
            fields=[
                ('id', models.BigAutoField(auto_created=True, primary_key=True, serialize=False, verbose_name='ID')),
                ('days_available', models.CharField(default='1234567', max_length=50)),
                ('num_lessons', models.PositiveIntegerField()),
                ('lesson_gap_weeks', models.PositiveIntegerField(choices=[(1, 'Biweekly'), (2, 'Weekly'), (3, 'Fortnightly'), (4, 'Monthly')], default=2)),
                ('lesson_duration_hours', models.PositiveIntegerField()),
                ('extra_requests', models.CharField(blank=True, max_length=250)),
                ('teacher', models.CharField(blank=True, max_length=50)),
                ('requestor', models.ForeignKey(on_delete=django.db.models.deletion.CASCADE, to=settings.AUTH_USER_MODEL)),
            ],
        ),
        migrations.CreateModel(
            name='Invoice',
            fields=[
                ('id', models.BigAutoField(auto_created=True, primary_key=True, serialize=False, verbose_name='ID')),
                ('date_created', models.DateTimeField(auto_now_add=True)),
                ('invoice_id', models.CharField(blank=True, max_length=7)),
                ('number_of_lessons', models.PositiveIntegerField(default=1)),
                ('lesson_duration', models.PositiveIntegerField(default=1)),
                ('hourly_cost', models.PositiveIntegerField(default=1)),
                ('total_price', models.PositiveIntegerField(blank=True)),
                ('associated_student', models.ForeignKey(on_delete=django.db.models.deletion.CASCADE, to=settings.AUTH_USER_MODEL)),
            ],
        ),
        migrations.CreateModel(
            name='BookedLesson',
            fields=[
                ('id', models.BigAutoField(auto_created=True, primary_key=True, serialize=False, verbose_name='ID')),
                ('days_available', models.CharField(default='1234567', max_length=50)),
                ('num_lessons', models.PositiveIntegerField()),
                ('lesson_gap_weeks', models.PositiveIntegerField(choices=[(1, 'Biweekly'), (2, 'Weekly'), (3, 'Fortnightly'), (4, 'Monthly')], default=2)),
                ('lesson_duration_hours', models.PositiveIntegerField()),
                ('lesson_date', models.DateTimeField(auto_now_add=True)),
                ('extra_requests', models.CharField(blank=True, max_length=250)),
                ('teacher', models.CharField(blank=True, max_length=50)),
                ('associated_lesson_request', models.ForeignKey(on_delete=django.db.models.deletion.CASCADE, to='lessons.lessonrequest')),
                ('requestor', models.ForeignKey(on_delete=django.db.models.deletion.CASCADE, to=settings.AUTH_USER_MODEL)),
            ],
        ),
    ]
